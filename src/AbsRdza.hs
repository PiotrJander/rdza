

module AbsRdza where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Program [TopDef]
  deriving (Eq, Ord, Show, Read)

data TopDef = FnDef Ident [Arg] ReturnType Block
  deriving (Eq, Ord, Show, Read)

data Arg = Arg Ident Type
  deriving (Eq, Ord, Show, Read)

data ReturnType = ReturnType Type | EmptyReturnType
  deriving (Eq, Ord, Show, Read)

data Block = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Decl Ident Expr | Ass Ident Expr | Ret Expr | VRet | SExp Expr
  deriving (Eq, Ord, Show, Read)

data Type
    = Int
    | Str
    | Char
    | Bool
    | Void
    | FnType [Type] Type
    | List Type
    | Fun Type [Type]
  deriving (Eq, Ord, Show, Read)

data Expr
    = EVar Ident
    | ELitInt Integer
    | ELitTrue
    | ELitFalse
    | EApp Ident [Expr]
    | EString String
    | Cond Expr Block
    | CondElse Expr Block Block
    | While Expr Block
    | BStmt Block
    | Closure [Arg] Expr
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (Eq, Ord, Show, Read)

